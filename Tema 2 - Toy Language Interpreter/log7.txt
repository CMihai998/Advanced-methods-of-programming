Execution Stack: 
Symbol table: {}
Out: []
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: []
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: []
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: [20]
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {0=null, 1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int )}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int )}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {v=( 3, int )}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int ), 3=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 3, int )}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int ), 3=20}
-------------------
Execution Stack: 
Symbol table: {v=( 3, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 3, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 3, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 3, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=20}
-------------------
Execution Stack: 
Symbol table: {a=( 4, Ref( int ) ), v=( 3, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=20, 4=( 3, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 4, Ref( int ) ), v=( 3, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=20, 4=( 3, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 4, Ref( int ) ), v=( 3, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int )}
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int )}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int )}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int )}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int )}
-------------------
Execution Stack: 
Symbol table: {v=( 5, int )}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 5, int )}
Out: []
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=20}
-------------------
Execution Stack: 
Symbol table: {v=( 5, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 5, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 5, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 5, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=20}
-------------------
Execution Stack: 
Symbol table: {a=( 6, Ref( int ) ), v=( 5, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=20, 6=( 5, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 6, Ref( int ) ), v=( 5, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=20, 6=( 5, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 6, Ref( int ) ), v=( 5, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int ), 3=30, 4=( 3, int ), 5=30, 6=( 5, int )}
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {0=null, 1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {0=null, 1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {0=null, 1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {0=null, 1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- ((v->30);print(Read(Read(a)) + 5)) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- ((v->30);print(Read(Read(a)) + 5)) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- ((v->30);print(Read(Read(a)) + 5)) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- ((v->30);print(Read(Read(a)) + 5)) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: v Ref( int ) --- 
Symbol table: {a=( 0, Ref( int ) )}
Out: []
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {a=( 0, Ref( int ) ), v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 25]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {0=null}
-------------------
