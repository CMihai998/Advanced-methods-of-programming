Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v Ref( int );(New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
ID:8
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- v Ref( int ) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
ID:8
Execution Stack: (New(v->20);(print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))))) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
ID:8
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- New(v->20) --- 
Symbol table: {v=( 0, int )}
Out: []
Heap table: {}
-------------------
ID:8
Execution Stack: (print(Read(v));(a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5))))) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
ID:8
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- print(Read(v)) --- 
Symbol table: {v=( 1, int )}
Out: []
Heap table: {1=20}
-------------------
ID:8
Execution Stack: (a Ref( Ref( int ) );(New(a->v);((v->30);print(Read(Read(a)) + 5)))) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
ID:8
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- a Ref( Ref( int ) ) --- 
Symbol table: {v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
ID:8
Execution Stack: (New(a->v);((v->30);print(Read(Read(a)) + 5))) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
ID:8
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- New(a->v) --- 
Symbol table: {a=( 0, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20}
-------------------
ID:8
Execution Stack: ((v->30);print(Read(Read(a)) + 5)) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
ID:8
Execution Stack: print(Read(Read(a)) + 5) --- (v->30) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=20, 2=( 1, int )}
-------------------
ID:8
Execution Stack: print(Read(Read(a)) + 5) --- 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20]
Heap table: {1=30, 2=( 1, int )}
-------------------
ID:8
Execution Stack: 
Symbol table: {a=( 2, Ref( int ) ), v=( 1, int )}
Out: [20, 35]
Heap table: {1=30, 2=( 1, int )}
-------------------
