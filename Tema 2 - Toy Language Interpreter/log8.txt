Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {}
Out: [10, 22, null]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {}
Out: [10, 22, null]
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {}
Out: [10, 22, null]
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((print(v);print(Read(a)));(((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((print(v);print(Read(a)));(((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- print(Read(a)) --- print(v) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- print(Read(a)) --- print(v) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- print(Read(a)) --- print(v) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- print(Read(a)) --- print(v) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: [null]
Heap table: {}
-------------------
Execution Stack: (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: [null]
Heap table: {}
-------------------
Execution Stack: (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: [null]
Heap table: {}
-------------------
Execution Stack: (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: [null]
Heap table: {}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [null]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [null]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [null]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [null]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [null]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [null, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [null, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [null, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (fork(((a->30);(v = 32;(print(v);print(Read(a))))));((v int;a Ref( int ));(v = 10;New(a->22)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {}
Out: [10, 22, null]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {}
Out: [10, 22, null]
Heap table: {}
-------------------
Execution Stack: 
Symbol table: {}
Out: [10, 22, null]
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- ((v int;a Ref( int ));(v = 10;New(a->22))) --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- v int --- 
Symbol table: {}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {0=null}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {0=null, 1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {0=null, 1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {0=null, 1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {0=null, 1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {0=null, 1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {0=null, 1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {0=null, 1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {0=null, 1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {0=null, 1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {0=null, 1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {0=null, 1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {0=null, 1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {0=null, 1=30}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: ((((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a)))))));(print(v);print(Read(a)))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- (((v int;a Ref( int ));(v = 10;New(a->22)));fork(((a->30);(v = 32;(print(v);print(Read(a))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- (v int;a Ref( int )) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- (v = 10;New(a->22)) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- New(a->22) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 22, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- Model.Statements.NopStatement@46fbb2c1 --- Model.Statements.NopStatement@1698c449 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- v int --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- a Ref( int ) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- v = 10 --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- New(a->22) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- fork(((a->30);(v = 32;(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- Model.Statements.NopStatement@5ef04b5 --- Model.Statements.NopStatement@5f4da5c3 --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- NOP --- NOP --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- NOP --- NOP --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- NOP --- NOP --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- NOP --- NOP --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32, 30]
Heap table: {1=30}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (v int;(a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))))) --- 
Symbol table: {}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (a Ref( int );(v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))))) --- 
Symbol table: {v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (v = 10;(New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))))) --- 
Symbol table: {a=( 0, int ), v=0}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (New(a->22);(fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a))))) --- 
Symbol table: {a=( 0, int ), v=10}
Out: []
Heap table: {}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (fork(((a->30);(v = 32;(print(v);print(Read(a))))));(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- NOP --- NOP --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- NOP --- NOP --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- NOP --- NOP --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- NOP --- NOP --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: ((a->30);(v = 32;(print(v);print(Read(a))))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- (a->30) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=22}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=30}
-------------------
Execution Stack: (v = 32;(print(v);print(Read(a)))) --- 
Symbol table: {a=( 1, int ), v=10}
Out: []
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- v = 32 --- 
Symbol table: {a=( 1, int ), v=10}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: (print(v);print(Read(a))) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- print(v) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: print(Read(a)) --- 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32]
Heap table: {1=30}
-------------------
Execution Stack: 
Symbol table: {a=( 1, int ), v=32}
Out: [10, 30, 32, 30]
Heap table: {1=30}
-------------------
